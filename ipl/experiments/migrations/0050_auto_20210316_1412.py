# Generated by Django 3.1.7 on 2021-03-16 13:12

from django.db import migrations, models
import django.db.models.deletion
import filebrowser.fields
import tinymce.models


class Migration(migrations.Migration):

    dependencies = [
        ('experiments', '0049_auto_20210308_1605'),
    ]

    operations = [
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instr_name', models.CharField(max_length=200, verbose_name='instrument name')),
                ('words_list', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250)),
                ('irt_params', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='IRT parameters')),
                ('f_lm_np_mean', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='NP: M (female)')),
                ('f_lm_np_sd', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='NP: SD (female)')),
                ('f_lm_p_mean', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='P: M (female)')),
                ('f_lm_p_sd', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='P: SD (female)')),
                ('f_bmin', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='BMin (female)')),
                ('f_slope', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='Slope (female)')),
                ('m_lm_np_mean', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='NP: M (male)')),
                ('m_lm_np_sd', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='NP: SD (male)')),
                ('m_lm_p_mean', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='P: M (male)')),
                ('m_lm_p_sd', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='P: SD (male)')),
                ('m_bmin', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='BMin (male)')),
                ('m_slope', filebrowser.fields.FileBrowseField(help_text='Only .csv files are supported.', max_length=250, verbose_name='Slope (male)')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='assess_type',
            field=models.CharField(choices=[('COMP', 'Comprehension'), ('PROD', 'Production')], default='COMP', max_length=4, verbose_name='assessment type'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='cdi_page_tpl',
            field=tinymce.models.HTMLField(default='{% extends "experiments/base.html" %} {% block title %}Vocabulary Checklist{% endblock %} {% block content %}\n<div class="container">\n    <div class="row">\n        <div class="col text-center">\n            <h1>Vocabulary Checklist</h1>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col">\n            <div class="card">\n                <div class="card-body">\n                    {% if error_message %}\n                    <div class="alert alert-danger" role="alert">\n                        {{ error_message }}\n                    </div>\n                    {% endif %}\n\n                    <form id="parentform" action="{% url \'experiments:parentFormSubmit\' subject_data.id %}" method="post" novalidate>\n                        {% csrf_token %}\n                        <p class="card-text">\n                            Please mark the boxes for words your child understands. If your child uses another word with the same meaning (e.g., nana for grandma), mark it anyway. </br></br>\n                        </p>\n                        {{ parent_form.non_field_errors }}\n                        <ul class="subject-data-form">\n                            {% for field in parent_form %}\n                            {% if field.name == \'resolution_w\' or field.name == \'resolution_h\' or field.name == \'experiment\' or field.name == \'parent_form\' %}\n                                {{ field }}\n                            {% else %}\n                            <li class="word-item" value="{{ forloop.counter }}">\n                                <div class="field-wrapper">\n                                    {{ field.errors }}\n                                    {{ field }} &emsp; <label class="label-inline">{{ field.label }}</label>\n                                    \n                                    <small class="form-text text-muted">{{ field.help_text }}</small>\n                                </div>\n                            </li>\n                            <br>\n                            {% endif %}\n                            {% endfor %}\n                        </ul>\n                        <button type="submit" class="btn btn-primary">Submit</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<script>\n    $(document).ready(function() {\n        $("#parentform").on(\'submit\', function() {\n            // to each unchecked checkbox\n            $(\'input:checkbox:not(:checked)\').each(function () {\n                // add hidden checkbox to be posted\n                $("#parentform").append("<input type=\'hidden\' name=\'" + this.name + "\' value=\'0\' />");\n            });\n        })\n    })\n</script>\n{% endblock %}', verbose_name='CDI page template'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='num_words',
            field=models.IntegerField(default=25, verbose_name='vocabulary checklist length'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='typical_dev',
            field=models.BooleanField(default=True, help_text='Uncheck this box if experiment involves non-typically developing children.', verbose_name='for typically-developing children'),
        ),
        migrations.AddField(
            model_name='subjectdata',
            name='cdi_estimate',
            field=models.FloatField(blank=True, default=None, null=True),
        ),
        migrations.CreateModel(
            name='CdiResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('given_label', models.CharField(blank=True, max_length=255, null=True)),
                ('response', models.BooleanField(blank=True, null=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.subjectdata')),
            ],
        ),
    ]
